// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookHubServiceClient is the client API for BookHubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookHubServiceClient interface {
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*User, error)
	GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*User, error)
	DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateRepo(ctx context.Context, in *CreateRepoReq, opts ...grpc.CallOption) (*Repo, error)
	GetReposForUser(ctx context.Context, in *GetReposForUserReq, opts ...grpc.CallOption) (*GetReposForUserResp, error)
	UpdateRepo(ctx context.Context, in *UpdateRepoReq, opts ...grpc.CallOption) (*Repo, error)
	GetRepo(ctx context.Context, in *GetRepoReq, opts ...grpc.CallOption) (*Repo, error)
	DeleteRepo(ctx context.Context, in *DeleteRepoReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteBookFromRepo(ctx context.Context, in *DeleteBookFromRepoReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateBook(ctx context.Context, in *CreateBookReq, opts ...grpc.CallOption) (*Book, error)
	GetBooksForRepo(ctx context.Context, in *GetBooksForRepoReq, opts ...grpc.CallOption) (*GetBooksForRepoResp, error)
	UpdateBook(ctx context.Context, in *UpdateBookReq, opts ...grpc.CallOption) (*Book, error)
	GetBook(ctx context.Context, in *GetBookReq, opts ...grpc.CallOption) (*Book, error)
	GetBookImage(ctx context.Context, in *GetBookImageReq, opts ...grpc.CallOption) (*File, error)
	GetBookFile(ctx context.Context, in *GetBookFileReq, opts ...grpc.CallOption) (*File, error)
	DeleteBook(ctx context.Context, in *DeleteBookReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type bookHubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookHubServiceClient(cc grpc.ClientConnInterface) BookHubServiceClient {
	return &bookHubServiceClient{cc}
}

func (c *bookHubServiceClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.BookHubService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookHubServiceClient) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.BookHubService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookHubServiceClient) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.BookHubService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookHubServiceClient) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.BookHubService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookHubServiceClient) CreateRepo(ctx context.Context, in *CreateRepoReq, opts ...grpc.CallOption) (*Repo, error) {
	out := new(Repo)
	err := c.cc.Invoke(ctx, "/api.BookHubService/CreateRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookHubServiceClient) GetReposForUser(ctx context.Context, in *GetReposForUserReq, opts ...grpc.CallOption) (*GetReposForUserResp, error) {
	out := new(GetReposForUserResp)
	err := c.cc.Invoke(ctx, "/api.BookHubService/GetReposForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookHubServiceClient) UpdateRepo(ctx context.Context, in *UpdateRepoReq, opts ...grpc.CallOption) (*Repo, error) {
	out := new(Repo)
	err := c.cc.Invoke(ctx, "/api.BookHubService/UpdateRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookHubServiceClient) GetRepo(ctx context.Context, in *GetRepoReq, opts ...grpc.CallOption) (*Repo, error) {
	out := new(Repo)
	err := c.cc.Invoke(ctx, "/api.BookHubService/GetRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookHubServiceClient) DeleteRepo(ctx context.Context, in *DeleteRepoReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.BookHubService/DeleteRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookHubServiceClient) DeleteBookFromRepo(ctx context.Context, in *DeleteBookFromRepoReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.BookHubService/DeleteBookFromRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookHubServiceClient) CreateBook(ctx context.Context, in *CreateBookReq, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/api.BookHubService/CreateBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookHubServiceClient) GetBooksForRepo(ctx context.Context, in *GetBooksForRepoReq, opts ...grpc.CallOption) (*GetBooksForRepoResp, error) {
	out := new(GetBooksForRepoResp)
	err := c.cc.Invoke(ctx, "/api.BookHubService/GetBooksForRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookHubServiceClient) UpdateBook(ctx context.Context, in *UpdateBookReq, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/api.BookHubService/UpdateBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookHubServiceClient) GetBook(ctx context.Context, in *GetBookReq, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/api.BookHubService/GetBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookHubServiceClient) GetBookImage(ctx context.Context, in *GetBookImageReq, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/api.BookHubService/GetBookImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookHubServiceClient) GetBookFile(ctx context.Context, in *GetBookFileReq, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/api.BookHubService/GetBookFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookHubServiceClient) DeleteBook(ctx context.Context, in *DeleteBookReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.BookHubService/DeleteBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookHubServiceServer is the server API for BookHubService service.
// All implementations must embed UnimplementedBookHubServiceServer
// for forward compatibility
type BookHubServiceServer interface {
	CreateUser(context.Context, *CreateUserReq) (*User, error)
	GetUser(context.Context, *GetUserReq) (*User, error)
	UpdateUser(context.Context, *UpdateUserReq) (*User, error)
	DeleteUser(context.Context, *DeleteUserReq) (*emptypb.Empty, error)
	CreateRepo(context.Context, *CreateRepoReq) (*Repo, error)
	GetReposForUser(context.Context, *GetReposForUserReq) (*GetReposForUserResp, error)
	UpdateRepo(context.Context, *UpdateRepoReq) (*Repo, error)
	GetRepo(context.Context, *GetRepoReq) (*Repo, error)
	DeleteRepo(context.Context, *DeleteRepoReq) (*emptypb.Empty, error)
	DeleteBookFromRepo(context.Context, *DeleteBookFromRepoReq) (*emptypb.Empty, error)
	CreateBook(context.Context, *CreateBookReq) (*Book, error)
	GetBooksForRepo(context.Context, *GetBooksForRepoReq) (*GetBooksForRepoResp, error)
	UpdateBook(context.Context, *UpdateBookReq) (*Book, error)
	GetBook(context.Context, *GetBookReq) (*Book, error)
	GetBookImage(context.Context, *GetBookImageReq) (*File, error)
	GetBookFile(context.Context, *GetBookFileReq) (*File, error)
	DeleteBook(context.Context, *DeleteBookReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedBookHubServiceServer()
}

// UnimplementedBookHubServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookHubServiceServer struct {
}

func (UnimplementedBookHubServiceServer) CreateUser(context.Context, *CreateUserReq) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedBookHubServiceServer) GetUser(context.Context, *GetUserReq) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedBookHubServiceServer) UpdateUser(context.Context, *UpdateUserReq) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedBookHubServiceServer) DeleteUser(context.Context, *DeleteUserReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedBookHubServiceServer) CreateRepo(context.Context, *CreateRepoReq) (*Repo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepo not implemented")
}
func (UnimplementedBookHubServiceServer) GetReposForUser(context.Context, *GetReposForUserReq) (*GetReposForUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReposForUser not implemented")
}
func (UnimplementedBookHubServiceServer) UpdateRepo(context.Context, *UpdateRepoReq) (*Repo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRepo not implemented")
}
func (UnimplementedBookHubServiceServer) GetRepo(context.Context, *GetRepoReq) (*Repo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepo not implemented")
}
func (UnimplementedBookHubServiceServer) DeleteRepo(context.Context, *DeleteRepoReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRepo not implemented")
}
func (UnimplementedBookHubServiceServer) DeleteBookFromRepo(context.Context, *DeleteBookFromRepoReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBookFromRepo not implemented")
}
func (UnimplementedBookHubServiceServer) CreateBook(context.Context, *CreateBookReq) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBook not implemented")
}
func (UnimplementedBookHubServiceServer) GetBooksForRepo(context.Context, *GetBooksForRepoReq) (*GetBooksForRepoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooksForRepo not implemented")
}
func (UnimplementedBookHubServiceServer) UpdateBook(context.Context, *UpdateBookReq) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBook not implemented")
}
func (UnimplementedBookHubServiceServer) GetBook(context.Context, *GetBookReq) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBook not implemented")
}
func (UnimplementedBookHubServiceServer) GetBookImage(context.Context, *GetBookImageReq) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookImage not implemented")
}
func (UnimplementedBookHubServiceServer) GetBookFile(context.Context, *GetBookFileReq) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookFile not implemented")
}
func (UnimplementedBookHubServiceServer) DeleteBook(context.Context, *DeleteBookReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBook not implemented")
}
func (UnimplementedBookHubServiceServer) mustEmbedUnimplementedBookHubServiceServer() {}

// UnsafeBookHubServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookHubServiceServer will
// result in compilation errors.
type UnsafeBookHubServiceServer interface {
	mustEmbedUnimplementedBookHubServiceServer()
}

func RegisterBookHubServiceServer(s grpc.ServiceRegistrar, srv BookHubServiceServer) {
	s.RegisterService(&BookHubService_ServiceDesc, srv)
}

func _BookHubService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookHubServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BookHubService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookHubServiceServer).CreateUser(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookHubService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookHubServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BookHubService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookHubServiceServer).GetUser(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookHubService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookHubServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BookHubService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookHubServiceServer).UpdateUser(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookHubService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookHubServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BookHubService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookHubServiceServer).DeleteUser(ctx, req.(*DeleteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookHubService_CreateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookHubServiceServer).CreateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BookHubService/CreateRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookHubServiceServer).CreateRepo(ctx, req.(*CreateRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookHubService_GetReposForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReposForUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookHubServiceServer).GetReposForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BookHubService/GetReposForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookHubServiceServer).GetReposForUser(ctx, req.(*GetReposForUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookHubService_UpdateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookHubServiceServer).UpdateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BookHubService/UpdateRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookHubServiceServer).UpdateRepo(ctx, req.(*UpdateRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookHubService_GetRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookHubServiceServer).GetRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BookHubService/GetRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookHubServiceServer).GetRepo(ctx, req.(*GetRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookHubService_DeleteRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookHubServiceServer).DeleteRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BookHubService/DeleteRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookHubServiceServer).DeleteRepo(ctx, req.(*DeleteRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookHubService_DeleteBookFromRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBookFromRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookHubServiceServer).DeleteBookFromRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BookHubService/DeleteBookFromRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookHubServiceServer).DeleteBookFromRepo(ctx, req.(*DeleteBookFromRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookHubService_CreateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookHubServiceServer).CreateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BookHubService/CreateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookHubServiceServer).CreateBook(ctx, req.(*CreateBookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookHubService_GetBooksForRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBooksForRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookHubServiceServer).GetBooksForRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BookHubService/GetBooksForRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookHubServiceServer).GetBooksForRepo(ctx, req.(*GetBooksForRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookHubService_UpdateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookHubServiceServer).UpdateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BookHubService/UpdateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookHubServiceServer).UpdateBook(ctx, req.(*UpdateBookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookHubService_GetBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookHubServiceServer).GetBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BookHubService/GetBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookHubServiceServer).GetBook(ctx, req.(*GetBookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookHubService_GetBookImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookHubServiceServer).GetBookImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BookHubService/GetBookImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookHubServiceServer).GetBookImage(ctx, req.(*GetBookImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookHubService_GetBookFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookHubServiceServer).GetBookFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BookHubService/GetBookFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookHubServiceServer).GetBookFile(ctx, req.(*GetBookFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookHubService_DeleteBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookHubServiceServer).DeleteBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BookHubService/DeleteBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookHubServiceServer).DeleteBook(ctx, req.(*DeleteBookReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BookHubService_ServiceDesc is the grpc.ServiceDesc for BookHubService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookHubService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.BookHubService",
	HandlerType: (*BookHubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _BookHubService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _BookHubService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _BookHubService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _BookHubService_DeleteUser_Handler,
		},
		{
			MethodName: "CreateRepo",
			Handler:    _BookHubService_CreateRepo_Handler,
		},
		{
			MethodName: "GetReposForUser",
			Handler:    _BookHubService_GetReposForUser_Handler,
		},
		{
			MethodName: "UpdateRepo",
			Handler:    _BookHubService_UpdateRepo_Handler,
		},
		{
			MethodName: "GetRepo",
			Handler:    _BookHubService_GetRepo_Handler,
		},
		{
			MethodName: "DeleteRepo",
			Handler:    _BookHubService_DeleteRepo_Handler,
		},
		{
			MethodName: "DeleteBookFromRepo",
			Handler:    _BookHubService_DeleteBookFromRepo_Handler,
		},
		{
			MethodName: "CreateBook",
			Handler:    _BookHubService_CreateBook_Handler,
		},
		{
			MethodName: "GetBooksForRepo",
			Handler:    _BookHubService_GetBooksForRepo_Handler,
		},
		{
			MethodName: "UpdateBook",
			Handler:    _BookHubService_UpdateBook_Handler,
		},
		{
			MethodName: "GetBook",
			Handler:    _BookHubService_GetBook_Handler,
		},
		{
			MethodName: "GetBookImage",
			Handler:    _BookHubService_GetBookImage_Handler,
		},
		{
			MethodName: "GetBookFile",
			Handler:    _BookHubService_GetBookFile_Handler,
		},
		{
			MethodName: "DeleteBook",
			Handler:    _BookHubService_DeleteBook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
