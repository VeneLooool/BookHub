// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/storage/storage.go

// Package mock is a generated GoMock package.
package mock

import (
	entity "bookhub/internal/entity"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserStorage is a mock of UserStorage interface.
type MockUserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockUserStorageMockRecorder
}

// MockUserStorageMockRecorder is the mock recorder for MockUserStorage.
type MockUserStorageMockRecorder struct {
	mock *MockUserStorage
}

// NewMockUserStorage creates a new mock instance.
func NewMockUserStorage(ctrl *gomock.Controller) *MockUserStorage {
	mock := &MockUserStorage{ctrl: ctrl}
	mock.recorder = &MockUserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStorage) EXPECT() *MockUserStorageMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserStorage) CreateUser(arg0 context.Context, arg1 entity.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserStorageMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserStorage)(nil).CreateUser), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockUserStorage) DeleteUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserStorageMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserStorage)(nil).DeleteUser), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockUserStorage) GetUser(arg0 context.Context, arg1 int64) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserStorageMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserStorage)(nil).GetUser), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockUserStorage) UpdateUser(arg0 context.Context, arg1 entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserStorageMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserStorage)(nil).UpdateUser), arg0, arg1)
}

// MockRepoStorage is a mock of RepoStorage interface.
type MockRepoStorage struct {
	ctrl     *gomock.Controller
	recorder *MockRepoStorageMockRecorder
}

// MockRepoStorageMockRecorder is the mock recorder for MockRepoStorage.
type MockRepoStorageMockRecorder struct {
	mock *MockRepoStorage
}

// NewMockRepoStorage creates a new mock instance.
func NewMockRepoStorage(ctrl *gomock.Controller) *MockRepoStorage {
	mock := &MockRepoStorage{ctrl: ctrl}
	mock.recorder = &MockRepoStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoStorage) EXPECT() *MockRepoStorageMockRecorder {
	return m.recorder
}

// CreateRepo mocks base method.
func (m *MockRepoStorage) CreateRepo(ctx context.Context, userID int64, repo entity.Repo) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepo", ctx, userID, repo)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepo indicates an expected call of CreateRepo.
func (mr *MockRepoStorageMockRecorder) CreateRepo(ctx, userID, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepo", reflect.TypeOf((*MockRepoStorage)(nil).CreateRepo), ctx, userID, repo)
}

// DeleteBookFromRepo mocks base method.
func (m *MockRepoStorage) DeleteBookFromRepo(ctx context.Context, RepoID, bookID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBookFromRepo", ctx, RepoID, bookID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBookFromRepo indicates an expected call of DeleteBookFromRepo.
func (mr *MockRepoStorageMockRecorder) DeleteBookFromRepo(ctx, RepoID, bookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBookFromRepo", reflect.TypeOf((*MockRepoStorage)(nil).DeleteBookFromRepo), ctx, RepoID, bookID)
}

// DeleteRepo mocks base method.
func (m *MockRepoStorage) DeleteRepo(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepo indicates an expected call of DeleteRepo.
func (mr *MockRepoStorageMockRecorder) DeleteRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepo", reflect.TypeOf((*MockRepoStorage)(nil).DeleteRepo), arg0, arg1)
}

// GetRepo mocks base method.
func (m *MockRepoStorage) GetRepo(arg0 context.Context, arg1 int64) (entity.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepo", arg0, arg1)
	ret0, _ := ret[0].(entity.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepo indicates an expected call of GetRepo.
func (mr *MockRepoStorageMockRecorder) GetRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepo", reflect.TypeOf((*MockRepoStorage)(nil).GetRepo), arg0, arg1)
}

// GetReposForUser mocks base method.
func (m *MockRepoStorage) GetReposForUser(ctx context.Context, userID int64) ([]entity.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReposForUser", ctx, userID)
	ret0, _ := ret[0].([]entity.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReposForUser indicates an expected call of GetReposForUser.
func (mr *MockRepoStorageMockRecorder) GetReposForUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReposForUser", reflect.TypeOf((*MockRepoStorage)(nil).GetReposForUser), ctx, userID)
}

// UpdateRepo mocks base method.
func (m *MockRepoStorage) UpdateRepo(arg0 context.Context, arg1 entity.Repo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRepo indicates an expected call of UpdateRepo.
func (mr *MockRepoStorageMockRecorder) UpdateRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepo", reflect.TypeOf((*MockRepoStorage)(nil).UpdateRepo), arg0, arg1)
}

// MockBookStorage is a mock of BookStorage interface.
type MockBookStorage struct {
	ctrl     *gomock.Controller
	recorder *MockBookStorageMockRecorder
}

// MockBookStorageMockRecorder is the mock recorder for MockBookStorage.
type MockBookStorageMockRecorder struct {
	mock *MockBookStorage
}

// NewMockBookStorage creates a new mock instance.
func NewMockBookStorage(ctrl *gomock.Controller) *MockBookStorage {
	mock := &MockBookStorage{ctrl: ctrl}
	mock.recorder = &MockBookStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookStorage) EXPECT() *MockBookStorageMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockBookStorage) CreateBook(ctx context.Context, repoId int64, book entity.Book) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", ctx, repoId, book)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockBookStorageMockRecorder) CreateBook(ctx, repoId, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockBookStorage)(nil).CreateBook), ctx, repoId, book)
}

// DeleteBook mocks base method.
func (m *MockBookStorage) DeleteBook(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockBookStorageMockRecorder) DeleteBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockBookStorage)(nil).DeleteBook), arg0, arg1)
}

// GetBook mocks base method.
func (m *MockBookStorage) GetBook(arg0 context.Context, arg1 int64) (entity.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", arg0, arg1)
	ret0, _ := ret[0].(entity.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook.
func (mr *MockBookStorageMockRecorder) GetBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockBookStorage)(nil).GetBook), arg0, arg1)
}

// GetBooksForRepo mocks base method.
func (m *MockBookStorage) GetBooksForRepo(ctx context.Context, repoID int64) ([]entity.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooksForRepo", ctx, repoID)
	ret0, _ := ret[0].([]entity.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooksForRepo indicates an expected call of GetBooksForRepo.
func (mr *MockBookStorageMockRecorder) GetBooksForRepo(ctx, repoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooksForRepo", reflect.TypeOf((*MockBookStorage)(nil).GetBooksForRepo), ctx, repoID)
}

// UpdateBook mocks base method.
func (m *MockBookStorage) UpdateBook(arg0 context.Context, arg1 entity.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockBookStorageMockRecorder) UpdateBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockBookStorage)(nil).UpdateBook), arg0, arg1)
}

// MockFileManager is a mock of FileManager interface.
type MockFileManager struct {
	ctrl     *gomock.Controller
	recorder *MockFileManagerMockRecorder
}

// MockFileManagerMockRecorder is the mock recorder for MockFileManager.
type MockFileManagerMockRecorder struct {
	mock *MockFileManager
}

// NewMockFileManager creates a new mock instance.
func NewMockFileManager(ctrl *gomock.Controller) *MockFileManager {
	mock := &MockFileManager{ctrl: ctrl}
	mock.recorder = &MockFileManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileManager) EXPECT() *MockFileManagerMockRecorder {
	return m.recorder
}

// CreateFile mocks base method.
func (m *MockFileManager) CreateFile(ctx context.Context, file entity.File) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", ctx, file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockFileManagerMockRecorder) CreateFile(ctx, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockFileManager)(nil).CreateFile), ctx, file)
}

// DeleteFile mocks base method.
func (m *MockFileManager) DeleteFile(ctx context.Context, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFileManagerMockRecorder) DeleteFile(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFileManager)(nil).DeleteFile), ctx, path)
}

// GetFile mocks base method.
func (m *MockFileManager) GetFile(ctx context.Context, path string) (entity.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", ctx, path)
	ret0, _ := ret[0].(entity.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile.
func (mr *MockFileManagerMockRecorder) GetFile(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockFileManager)(nil).GetFile), ctx, path)
}

// UpdateFile mocks base method.
func (m *MockFileManager) UpdateFile(ctx context.Context, file entity.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFile", ctx, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFile indicates an expected call of UpdateFile.
func (mr *MockFileManagerMockRecorder) UpdateFile(ctx, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFile", reflect.TypeOf((*MockFileManager)(nil).UpdateFile), ctx, file)
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockStorage) CreateBook(ctx context.Context, repoId int64, book entity.Book) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", ctx, repoId, book)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockStorageMockRecorder) CreateBook(ctx, repoId, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockStorage)(nil).CreateBook), ctx, repoId, book)
}

// CreateFile mocks base method.
func (m *MockStorage) CreateFile(ctx context.Context, file entity.File) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", ctx, file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockStorageMockRecorder) CreateFile(ctx, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockStorage)(nil).CreateFile), ctx, file)
}

// CreateRepo mocks base method.
func (m *MockStorage) CreateRepo(ctx context.Context, userID int64, repo entity.Repo) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepo", ctx, userID, repo)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepo indicates an expected call of CreateRepo.
func (mr *MockStorageMockRecorder) CreateRepo(ctx, userID, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepo", reflect.TypeOf((*MockStorage)(nil).CreateRepo), ctx, userID, repo)
}

// CreateUser mocks base method.
func (m *MockStorage) CreateUser(arg0 context.Context, arg1 entity.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStorageMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStorage)(nil).CreateUser), arg0, arg1)
}

// DeleteBook mocks base method.
func (m *MockStorage) DeleteBook(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockStorageMockRecorder) DeleteBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockStorage)(nil).DeleteBook), arg0, arg1)
}

// DeleteBookFromRepo mocks base method.
func (m *MockStorage) DeleteBookFromRepo(ctx context.Context, RepoID, bookID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBookFromRepo", ctx, RepoID, bookID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBookFromRepo indicates an expected call of DeleteBookFromRepo.
func (mr *MockStorageMockRecorder) DeleteBookFromRepo(ctx, RepoID, bookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBookFromRepo", reflect.TypeOf((*MockStorage)(nil).DeleteBookFromRepo), ctx, RepoID, bookID)
}

// DeleteFile mocks base method.
func (m *MockStorage) DeleteFile(ctx context.Context, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockStorageMockRecorder) DeleteFile(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockStorage)(nil).DeleteFile), ctx, path)
}

// DeleteRepo mocks base method.
func (m *MockStorage) DeleteRepo(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepo indicates an expected call of DeleteRepo.
func (mr *MockStorageMockRecorder) DeleteRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepo", reflect.TypeOf((*MockStorage)(nil).DeleteRepo), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStorage) DeleteUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStorageMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStorage)(nil).DeleteUser), arg0, arg1)
}

// GetBook mocks base method.
func (m *MockStorage) GetBook(arg0 context.Context, arg1 int64) (entity.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", arg0, arg1)
	ret0, _ := ret[0].(entity.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook.
func (mr *MockStorageMockRecorder) GetBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockStorage)(nil).GetBook), arg0, arg1)
}

// GetBooksForRepo mocks base method.
func (m *MockStorage) GetBooksForRepo(ctx context.Context, repoID int64) ([]entity.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooksForRepo", ctx, repoID)
	ret0, _ := ret[0].([]entity.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooksForRepo indicates an expected call of GetBooksForRepo.
func (mr *MockStorageMockRecorder) GetBooksForRepo(ctx, repoID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooksForRepo", reflect.TypeOf((*MockStorage)(nil).GetBooksForRepo), ctx, repoID)
}

// GetFile mocks base method.
func (m *MockStorage) GetFile(ctx context.Context, path string) (entity.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", ctx, path)
	ret0, _ := ret[0].(entity.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile.
func (mr *MockStorageMockRecorder) GetFile(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockStorage)(nil).GetFile), ctx, path)
}

// GetRepo mocks base method.
func (m *MockStorage) GetRepo(arg0 context.Context, arg1 int64) (entity.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepo", arg0, arg1)
	ret0, _ := ret[0].(entity.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepo indicates an expected call of GetRepo.
func (mr *MockStorageMockRecorder) GetRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepo", reflect.TypeOf((*MockStorage)(nil).GetRepo), arg0, arg1)
}

// GetReposForUser mocks base method.
func (m *MockStorage) GetReposForUser(ctx context.Context, userID int64) ([]entity.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReposForUser", ctx, userID)
	ret0, _ := ret[0].([]entity.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReposForUser indicates an expected call of GetReposForUser.
func (mr *MockStorageMockRecorder) GetReposForUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReposForUser", reflect.TypeOf((*MockStorage)(nil).GetReposForUser), ctx, userID)
}

// GetUser mocks base method.
func (m *MockStorage) GetUser(arg0 context.Context, arg1 int64) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStorageMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStorage)(nil).GetUser), arg0, arg1)
}

// UpdateBook mocks base method.
func (m *MockStorage) UpdateBook(arg0 context.Context, arg1 entity.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockStorageMockRecorder) UpdateBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockStorage)(nil).UpdateBook), arg0, arg1)
}

// UpdateFile mocks base method.
func (m *MockStorage) UpdateFile(ctx context.Context, file entity.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFile", ctx, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFile indicates an expected call of UpdateFile.
func (mr *MockStorageMockRecorder) UpdateFile(ctx, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFile", reflect.TypeOf((*MockStorage)(nil).UpdateFile), ctx, file)
}

// UpdateRepo mocks base method.
func (m *MockStorage) UpdateRepo(arg0 context.Context, arg1 entity.Repo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRepo indicates an expected call of UpdateRepo.
func (mr *MockStorageMockRecorder) UpdateRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepo", reflect.TypeOf((*MockStorage)(nil).UpdateRepo), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStorage) UpdateUser(arg0 context.Context, arg1 entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStorageMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStorage)(nil).UpdateUser), arg0, arg1)
}
